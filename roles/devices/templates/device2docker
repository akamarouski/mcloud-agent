#!/bin/bash

DOCKER_IMAGE_ID=`docker images | grep '{{ android_device_image }}' | grep '{{ android_device_version }}' | awk '{print($3)}'`
CONTAINERS=( `docker ps --format '{{ '{{' }}.Names{{ '}}' }}' | grep device | cut -d '-' -f 2-` )
CONNECTED_DEVICES=( `ls /dev/ | grep device | cut -d '-' -f 2-` )
if [ -z $ACTION ]; then
    ACTION=$1
fi
echo ACTION: $ACTION

function recreate_container() {
    local device=$1
    # #21 improve recreate device container parametrization
    device=${device#"device-"}
    delete_container $device
    create_container $device
}

function delete_container () {
    local device=$1
    local container=`docker ps -a | grep $device | sed 's/^\([a-z0-9]*\).*$/\1/g'`
    docker rm $container -f || echo 'already deleted'
}

function create_container () {
    local device=$1
    echo "device: $device"

    local udid=`echo $device | cut -d '-' -f 1`
    echo "udid: $udid"

    local devices=/usr/local/bin/devices.txt
    local device_name=`cat ${devices} | grep "$udid" | cut -d '|' -f 1`
    echo "device_name: $device_name"

    local device_adb_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 3`
    echo "device_adb_port: $device_adb_port"

    local stf_min_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 4`
    echo "stf_min_port: $stf_min_port"

    local stf_max_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 5`
    echo "stf_max_port: $stf_max_port"

    local proxy_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 6`
    echo "proxy_port: $proxy_port"

    local appium_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 7`
    echo "appium_port: $appium_port"


    local symlink=/dev/device-$device

    docker run -d --name "device-$device" --log-opt max-size=50m -m 1g --device=$symlink:/dev/bus/usb/003/011 --net={{ stf_docker_network }} \
	--health-start-period 60s \
	--restart always \
	-v mcloud-appium-volume:/opt/mcloud -v mcloud-opencv-volume:/opt/opencv \
        -v mcloud-key-volume:/root/.android \
	-v {{ nginx_home }}:{{ nginx_home }} \
	-v /opt/apk:/opt/apk \
        -e NODE_OPTIONS=--max_old_space_size={{ max_old_space_size_value }} \
        -e STF_PROVIDER_DEVICE_NAME="${device_name}" -e DEVICE_UDID="${udid}" \
        -p $device_adb_port:5037 \
	-e ADB_PORT=$device_adb_port \
	-e STF_PROVIDER_HOST={{ stf_provider_host }} \
        -e STF_PROVIDER_NAME="{{ stf_provider_name }}" \
        -e STF_PROVIDER_APPIUM_PORT=$appium_port \
        -p $appium_port:$appium_port \
        -e STF_PROVIDER_MIN_PORT=$stf_min_port -e STF_PROVIDER_MAX_PORT=$stf_max_port \
	-p $stf_min_port-$stf_max_port:$stf_min_port-$stf_max_port \
	-e STF_PROVIDER_PUBLIC_IP={{ stf_public_host }} \
        -e STF_PROVIDER_CONNECT_SUB={{ stf_provider_connect_sub }} \
        -e STF_PROVIDER_CONNECT_PUSH={{ stf_provider_connect_push }} \
	-e RETHINKDB_PORT_28015_TCP={{ stf_rethinkdb }} \
	-e SELENIUM_HUB_HOST={{ selenium_hub_host }} -e SELENIUM_HUB_PORT={{ selenium_hub_port }} \
	-e PROXY_PORT=$proxy_port \
	-p $proxy_port:$proxy_port \
        $DOCKER_IMAGE_ID || echo 'already created'
}

function update_symlink () {
    local device=$1
    local device_path=`ls -l /dev/ | grep $device | sed 's/^.*> \(.*\)$/\1/g'`
    if [[ $device_path != /dev* ]]
    then
        local symlink=/dev/device-$device
        local temp_symlink=/dev/temp-$device
        device_path=/dev/$device_path
        setfacl -m u:$USER:rw $device_path
        ln -s $device_path $temp_symlink
        mv $temp_symlink $symlink
        rm $temp_symlink
    fi
}

if [[ $ACTION = "add" ]]
then
    for device in "${CONNECTED_DEVICES[@]}"
    do
        update_symlink $device
        present=0
        for container in "${CONTAINERS[@]}"
        do
            if [[ $device = $container ]]
            then
                present=1
            fi
        done
        if [[ $present = 0 ]]
        then
            create_container $device
        fi
    done
elif [[ $ACTION = "remove" ]]
then
    sleep 5
    CONNECTED_DEVICES=( `ls /dev/ | grep device | cut -d '-' -f 2-` )
    for container in "${CONTAINERS[@]}"
    do
	echo verifying container: $container
        present=0
        for device in "${CONNECTED_DEVICES[@]}"
        do
	    echo verifying device: $device
            if [[ $device = $container ]]
            then
		echo $device still alive
                present=1
            fi
        done
        if [[ $present = 0 ]]
        then
	    echo delete container: $container
            delete_container $container
        fi
    done
elif [[ $ACTION = "recreate" ]]
then
    recreate_container $2
fi

exit 0
