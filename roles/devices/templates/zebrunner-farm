#!/bin/bash

DEVICE_IMAGE={{ ANDROID_DEVICE_IMAGE }}
DEVICE_VERSION={{ ANDROID_DEVICE_VERSION }}

if [ ! -z $ACTION ]; then
  # triggered by udev rule where device serial (udid) is a must to proceed!
  if [ -z $ID_SERIAL_SHORT ]; then
    echo "do nothing as device id/udid missed."
    exit 0
  fi
else
    ACTION=$1
fi
echo ACTION: $ACTION

# useful export command to detect existing env vars per each device/vendor
#export

function create_containers () {
    local device=$1
    echo "creating $device containers"

    # cut device- to support manual and udev recreation
    device=${device#"device-"}
    echo "device: $device"

    local udid=`echo $device | cut -d '-' -f 2`
    echo "udid: $udid"

    #TODO: verify if device containers already exist and do nothing then

    local devices=/usr/local/bin/devices.txt
    local device_name=`cat ${devices} | grep "$udid" | cut -d '|' -f 1`
    echo "device_name: $device_name"

    local platform_name=`cat ${devices} | grep "$udid" | cut -d '|' -f 2`
    echo "platform_name: $platform_name"

    local udid=`cat ${devices} | grep "$udid" | cut -d '|' -f 3`
    echo "udid: $udid"

    local device_adb_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 4`
    echo "device_adb_port: $device_adb_port"

    local stf_min_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 5`
    echo "stf_min_port: $stf_min_port"

    local stf_max_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 6`
    echo "stf_max_port: $stf_max_port"

    local proxy_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 7`
    echo "proxy_port: $proxy_port"

    local appium_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 8`
    echo "appium_port: $appium_port"


    local symlink=/dev/device-$device

    local net={{ STF_DOCKER_NETWORK }}

    docker network inspect ${net} >/dev/null 2>&1 || docker network create ${net}

  if [ $platform_name == "android" ]; then
    docker run -itd --name device-${device_name}-${udid}-appium --network ${net} \
        --restart always \
	--device=$symlink:/dev/bus/usb/003/011 \
        -v mcloud-key-volume:/root/.android \
	-v appium-storage-volume:/opt/appium-storage \
        -v /opt/zebrunner:/opt/zebrunner \
	-e PLATFORM_NAME=$platform_name \
	-e DEVICE_UDID=$udid \
        -e RETAIN_TASK=true \
	-e REMOTE_ADB=false \
	-e CONNECT_TO_GRID=true \
	-e CUSTOM_NODE_CONFIG=true \
	-e APPIUM_HOST=${device_name}-appium \
        -e SELENIUM_HOST={{ SELENIUM_HUB_HOST }} -e SELENIUM_PORT={{ SELENIUM_HUB_PORT }} \
	-e DEVICE_NAME="${device_name}" -e DEVICE_UDID="${udid}" \
	-e ADB_PORT=$device_adb_port \
	-e PROXY_PORT=$proxy_port \
        -e STF_PROVIDER_HOST={{ STF_PROVIDER_HOST }} \
	-e STF_PROVIDER_MAX_PORT=$stf_max_port \
	-e STF_PROVIDER_APPIUM_PORT=$appium_port \
	-p $appium_port:4723 \
        -e RELAXED_SECURITY=true \
        -e BUCKET={{ S3_BUCKET }} -e TENANT={{ S3_TENANT }} -e AWS_ACCESS_KEY_ID={{ S3_ACCESS_KEY_ID }} -e AWS_SECRET_ACCESS_KEY={{ S3_SECRET }} -e AWS_DEFAULT_REGION={{ S3_REGION }} \
	-e OPTIMIZE_APP_DOWNLOAD=true \
        public.ecr.aws/zebrunner/appium:{{ APPIUM_VERSION }}

    docker run -d --name device-${device_name}-${udid} --log-opt max-size=50m -m 1g --net=${net} \
	--link device-${device_name}-${udid}-appium:appium \
        -e STF_PROVIDER_ADB_HOST=appium \
	--health-start-period 60s \
	--restart always \
	-e PLATFORM_NAME=$platform_name \
        -e NODE_OPTIONS=--max_old_space_size={{ MAX_OLD_SPACE_SIZE_VALUE }} \
        -e STF_PROVIDER_DEVICE_NAME="${device_name}" -e DEVICE_UDID="${udid}" \
        -e STF_PROVIDER_HOST={{ STF_PROVIDER_HOST }} \
        -e STF_PROVIDER_NAME="{{ STF_PROVIDER_NAME }}" \
        -e STF_PROVIDER_APPIUM_PORT=$appium_port \
        -e STF_PROVIDER_MIN_PORT=$stf_min_port -e STF_PROVIDER_MAX_PORT=$stf_max_port \
	-p $stf_min_port-$stf_max_port:$stf_min_port-$stf_max_port \
        -e STF_PROVIDER_PUBLIC_IP={{ STF_PUBLIC_HOST }} \
        -e STF_PROVIDER_CONNECT_SUB={{ STF_PROVIDER_CONNECT_SUB }} \
        -e STF_PROVIDER_CONNECT_PUSH={{ STF_PROVIDER_CONNECT_PUSH }} \
        -e RETHINKDB_PORT_28015_TCP={{ STF_RETHINKDB }} \
        $DOCKER_IMAGE_ID || echo 'already created'
  elif [ $platform_name == "ios" ]; then
    # TODO: run our appium container tuned for iOS. Combine later into the single run command
    # candidates for removal: ADB_PORT, STF_PROVIDER_MAX_PORT
    docker run -itd --name device-${device_name}-${udid}-appium --network ${net} \
        --restart always \
	-v appium-storage-volume:/opt/appium-storage \
	-v /opt/zebrunner:/opt/zebrunner \
        -v /var/run/usbmuxd:/var/run/usbmuxd \
        -v /var/lib/lockdown:/var/lib/lockdown \
        -v {{ WDA_IPA_PATH }}:/opt/WebDriverAgent.ipa \
	-e WDA_ENV=/opt/zebrunner/wda-${udid}.env \
        -e WDA_LOG_FILE=/opt/zebrunner/wda-${udid}.log \
        -e P12FILE="{{ P12FILE }}" \
        -e P12PASSWORD="{{ P12PASSWORD }}" \
        -e PLATFORM_NAME=$platform_name \
        -e DEVICE_UDID=$udid \
        -e RETAIN_TASK=true \
        -e CONNECT_TO_GRID=true \
        -e CUSTOM_NODE_CONFIG=true \
        -e APPIUM_HOST=${device_name}-appium \
        -e SELENIUM_HOST={{ SELENIUM_HUB_HOST }} -e SELENIUM_PORT={{ SELENIUM_HUB_PORT }} \
        -e DEVICE_NAME="${device_name}" -e DEVICE_UDID="${udid}" \
        -e ADB_PORT=$device_adb_port \
        -e PROXY_PORT=$proxy_port \
        -e STF_PROVIDER_HOST={{ STF_PROVIDER_HOST }} \
        -e STF_PROVIDER_MAX_PORT=$stf_max_port \
        -e STF_PROVIDER_APPIUM_PORT=$appium_port \
        -p $appium_port:4723 \
        -e RELAXED_SECURITY=true \
        -e BUCKET={{ S3_BUCKET }} -e TENANT={{ S3_TENANT }} -e AWS_ACCESS_KEY_ID={{ S3_ACCESS_KEY_ID }} -e AWS_SECRET_ACCESS_KEY={{ S3_SECRET }} -e AWS_DEFAULT_REGION={{ S3_REGION }} \
	-e OPTIMIZE_APP_DOWNLOAD=true \
        public.ecr.aws/zebrunner/appium:{{ APPIUM_VERSION }}


#        -v /home/build/tools/vd/mcloud-android/start_all.sh:/opt/start_all.sh \
#        -v /home/build/tools/vd/mcloud-android/healthcheck:/usr/local/bin/healthcheck \

    #TODO: invetsigate if we need linking with appium container
    docker run -d --name device-${device_name}-${udid} --log-opt max-size=50m -m 1g --net=${net} \
        --restart always \
        --link device-${device_name}-${udid}-appium:appium \
        -v /opt/zebrunner:/opt/zebrunner \
        -v /var/run/usbmuxd:/var/run/usbmuxd \
        -e WDA_ENV=/opt/zebrunner/wda-${udid}.env \
        -e PLATFORM_NAME=$platform_name \
        -e NODE_OPTIONS=--max_old_space_size={{ MAX_OLD_SPACE_SIZE_VALUE }} \
        -e STF_PROVIDER_DEVICE_NAME="${device_name}" -e DEVICE_UDID="${udid}" \
        -e STF_PROVIDER_HOST={{ STF_PROVIDER_HOST }} \
        -e STF_PROVIDER_NAME="{{ STF_PROVIDER_NAME }}" \
        -e STF_PROVIDER_APPIUM_PORT=$appium_port \
        -e STF_PROVIDER_MIN_PORT=$stf_min_port -e STF_PROVIDER_MAX_PORT=$stf_max_port \
        -p $stf_min_port-$stf_max_port:$stf_min_port-$stf_max_port \
        -e STF_PROVIDER_PUBLIC_IP={{ STF_PUBLIC_HOST }} \
        -e STF_PROVIDER_CONNECT_SUB={{ STF_PROVIDER_CONNECT_SUB }} \
        -e STF_PROVIDER_CONNECT_PUSH={{ STF_PROVIDER_CONNECT_PUSH }} \
        -e RETHINKDB_PORT_28015_TCP={{ STF_RETHINKDB }} \
        $DOCKER_IMAGE_ID || echo 'already created'
  fi
}

function stop() {
  local filter_device=$1
  local devices=/usr/local/bin/devices.txt

  # if $device is empty do stop for all connected devices otherwise stop only filtered
  if [ ! -z $filter_device ]; then
    echo stopping containers for $filter_device...
    local device_name=`cat ${devices} | grep "$filter_device" | cut -d '|' -f 1`
    local udid=`cat ${devices} | grep "$filter_device" | cut -d '|' -f 3`

    stop_containers device-${device_name}-${udid}
  else
    # as no device filter provided continue with stopping all device containers
    for device in "${CONNECTED_DEVICES[@]}"
    do
      stop_containers device-$device
    done
  fi
}

function stop_containers() {
  local container=$1
  echo "stopping $container containers..."
  docker stop $container
  docker stop $container-appium
}

function down() {
  local filter_device=$1
  local devices=/usr/local/bin/devices.txt

  # if $device is empty do rm for all connected devices otherwise rm only filtered
  if [ ! -z $filter_device ]; then
    echo removing containers for $filter_device...
    local device_name=`cat ${devices} | grep "$filter_device" | cut -d '|' -f 1`
    local udid=`cat ${devices} | grep "$filter_device" | cut -d '|' -f 3`

    remove_containers device-${device_name}-${udid}
  else
    # as no device filter provided continue with removing all device containers
    for device in "${CONNECTED_DEVICES[@]}"
    do
      remove_containers device-$device
    done
  fi
}

function remove_containers() {
  local container=$1
  echo "removing $container containers..."
  docker rm -f $container
  docker rm -f $container-appium
}

function start() {
  local filter_device=$1
  local devices=/usr/local/bin/devices.txt

  # if $device is empty do start for all connected devices otherwise start only filtered
  if [ ! -z $filter_device ]; then
    echo starting containers for $filter_device...
    local device_name=`cat ${devices} | grep "$filter_device" | cut -d '|' -f 1`
    local udid=`cat ${devices} | grep "$filter_device" | cut -d '|' -f 3`

    create_containers device-${device_name}-${udid}
    start_containers device-${device_name}-${udid}
  else
    # as no device filter provided continue with starting all device containers
    for device in "${CONNECTED_DEVICES[@]}"
    do
      create_containers device-$device
      start_containers device-$device
    done
  fi
}

function start_containers() {
  local container=$1
  echo "starting $container containers..."
  docker start $container
#  docker start $container-appium
}

function backup() {
  echo_warning "Make sure to execute from mcloud-android folder!"
  confirm "" "      Do you want to continue?" "n"
  if [ $? -eq 0 ]; then
    exit 1
  fi

  if [ ! -d backup ]; then
    echo_warning "There is no backup folder detected!"
    exit 1
  fi

  # copy udev related files into ./backup folder
  cp /usr/local/bin/zebrunner-farm backup/
  cp /usr/local/bin/devices.txt backup/
  cp /etc/udev/rules.d/90_mcloud.rules backup/

  if [ -f backup/zebrunner-farm ] && [ -f backup/devices.txt ] && [ -f backup/90_mcloud.rules ]; then
    echo "MCloud backup succeed."
  else
    echo_warning "MCloud backup failed!"
    echo_telegram
  fi
}

function restore() {
  echo_warning "Make sure you are inside mcloud-android folder and be able to execute sudo commands!"
  confirm "" "      Do you want to continue?" "n"
  if [ $? -eq 0 ]; then
    exit 1
  fi

  sudo cp backup/zebrunner-farm /usr/local/bin/zebrunner-farm
  sudo cp backup/devices.txt /usr/local/bin/devices.txt
  sudo cp backup/90_mcloud.rules /etc/udev/rules.d/90_mcloud.rules

  if [ -f /usr/local/bin/zebrunner-farm ] && [ -f /usr/local/bin/devices.txt ] && [ -f /etc/udev/rules.d/90_mcloud.rules ]; then
    echo "MCloud restore succeed."
  else
    echo_warning "MCloud restore failed!"
    echo_telegram
  fi

}

function shutdown() {
  echo_warning "Shutdown will erase all MCloud settings and data!"
  confirm "" "      Do you want to continue?" "n"
  if [[ $? -eq 0 ]]; then
    exit
  fi

  sudo rm -f /usr/local/bin/zebrunner-farm
  sudo rm -f /usr/local/bin/devices.txt
  sudo rm -f /etc/udev/rules.d/90_mcloud.rules

  if [ -f /usr/local/bin/zebrunner-farm ] || [ -f /usr/local/bin/devices.txt ] || [ -f /etc/udev/rules.d/90_mcloud.rules ]; then
    echo_warning "MCloud shutdown failed!"
    echo_telegram
  else
    echo "MCloud shutdown succeed."
  fi
}

function confirm() {
    local message=$1
    local question=$2
    local isEnabled=$3

    if [[ "$isEnabled" == "1" ]]; then
      isEnabled="y"
    fi
    if [[ "$isEnabled" == "0" ]]; then
      isEnabled="n"
    fi

    while true; do
      if [[ ! -z $message ]]; then
        echo "$message"
      fi

      read -r -p "$question y/n [$isEnabled]:" response
      if [[ -z $response ]]; then
        if [[ "$isEnabled" == "y" ]]; then
          return 1
        fi
        if [[ "$isEnabled" == "n" ]]; then
          return 0
        fi
      fi

      if [[ "$response" == "y" || "$response" == "Y" ]]; then
        return 1
      fi

      if [[ "$response" == "n" ||  "$response" == "N" ]]; then
        return 0
      fi

      echo "Please answer y (yes) or n (no)."
      echo
    done
}

function version() {
  echo "MCloud docker: ${DEVICE_IMAGE}"
  echo "      version: ${DEVICE_VERSION}"
}

echo_warning() {
    echo "
      WARNING! $1"
}

echo_telegram() {
    echo "
      For more help join telegram channel: https://t.me/zebrunner
      "
}

function echo_help() {
    echo "
      Usage: zebrunner-farm [option]
      Arguments:
          start   [udid] Start devices containers or exact device by udid
          stop    [udid] Stop and keep devices containers or exact device by udid
          restart [udid] Restart all devices containers or exact device by udid
          down    [udid] Stop and remove devices containers
          shutdown       Stop and remove devices container, destroy all configuration
          backup         Backup MCloud setup
          restore        Restore MCloud setup
          version        Version of MCloud device image"
      echo_telegram
      exit 0
}


# spaces before and after DEVICE_VERSION to identify exact image id
DOCKER_IMAGE_ID=`docker images | grep "${DEVICE_IMAGE}" | grep " ${DEVICE_VERSION} " | awk '{print($3)}'`
#echo DOCKER_IMAGE_ID: $DOCKER_IMAGE_ID

CONTAINERS=( `docker ps --format '{{ '{{' }}.Names{{ '}}' }}' | grep device | grep -v appium | cut -d '-' -f 2-` )
#echo CONTAINERS: $CONTAINERS

CONNECTED_DEVICES=( `ls /dev/ | grep device | cut -d '-' -f 2-` )
#echo CONNECTED_DEVICES: $CONNECTED_DEVICES


case "$ACTION" in
    add)
        start ${ID_SERIAL_SHORT}
        ;;
    remove)
        down ${ID_SERIAL_SHORT}
        ;;
    start)
        start $2
        ;;
    stop)
        stop $2
        ;;
    restart)
        down $2
        start $2
        ;;
    down)
        down $2
        ;;
    shutdown)
        shutdown
        ;;
    backup)
        backup
        ;;
    restore)
        restore
        ;;
    version)
        version
        ;;
    *)
        echo "Unknown option detected: $1"
        echo_help
        exit 1
        ;;
esac

exit 0
