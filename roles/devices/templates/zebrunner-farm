#!/bin/bash

#TODO: #25: add spaces before and after ' {{ ANDROID_DEVICE_VERSION }} ' to find exact image id!
DOCKER_IMAGE_ID=`docker images | grep '{{ ANDROID_DEVICE_IMAGE }}' | grep '{{ ANDROID_DEVICE_VERSION }}' | awk '{print($3)}'`
echo DOCKER_IMAGE_ID: $DOCKER_IMAGE_ID

CONTAINERS=( `docker ps --format '{{ '{{' }}.Names{{ '}}' }}' | grep device | cut -d '-' -f 2-` )
echo CONTAINERS: $CONTAINERS

CONNECTED_DEVICES=( `ls /dev/ | grep device | cut -d '-' -f 2-` )
echo CONNECTED_DEVICES: $CONNECTED_DEVICES

if [ -z $ACTION ]; then
    ACTION=$1
fi
echo ACTION: $ACTION

function recreate_containers() {
    local device=$1
    echo "recreate_containers local device: $device"

    device=${device#"device-"}

    echo "recreate_containers local device: $device"
    delete_containers $device
    create_containers $device
}

function delete_containers () {
    local device=$1
    echo "delete_containers local device: $device"
    local container=`docker ps -a | grep $device | sed 's/^\([a-z0-9]*\).*$/\1/g'`
    docker rm $container -f || echo 'already deleted'
    docker rm $container-appium -f || echo 'already deleted'
}

function create_containers () {
    local device=$1
    echo "create_containers locale device: $device"

    local udid=`echo $device | cut -d '-' -f 2`
    echo "udid: $udid"

    local devices=/usr/local/bin/devices.txt
    local device_name=`cat ${devices} | grep "$udid" | cut -d '|' -f 1`
    echo "device_name: $device_name"

    local device_adb_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 3`
    echo "device_adb_port: $device_adb_port"

    local stf_min_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 4`
    echo "stf_min_port: $stf_min_port"

    local stf_max_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 5`
    echo "stf_max_port: $stf_max_port"

    local proxy_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 6`
    echo "proxy_port: $proxy_port"

    local appium_port=`cat ${devices} | grep "$udid" | cut -d '|' -f 7`
    echo "appium_port: $appium_port"


    local symlink=/dev/device-$device

    local net={{ STF_DOCKER_NETWORK }}

    docker network inspect ${net} >/dev/null 2>&1 || docker network create ${net}

#TODO: move aws s3 to env vars
    docker run -itd --name device-${device_name}-${udid}-appium --network ${net} \
	--device=$symlink:/dev/bus/usb/003/011 \
        -v mcloud-key-volume:/root/.android \
        -v {{ NGINX_HOME }}:{{ NGINX_HOME }} \
        -e RETAIN_TASK=true \
	-e REMOTE_ADB=false \
	-e CONNECT_TO_GRID=true \
	-e CUSTOM_NODE_CONFIG=true \
	-e APPIUM_HOST=${device_name}-appium \
        -e SELENIUM_HOST={{ SELENIUM_HUB_HOST }} -e SELENIUM_PORT={{ SELENIUM_HUB_PORT }} \
	-e DEVICE_NAME="${device_name}" -e DEVICE_UDID="${udid}" \
	-e ADB_PORT=$device_adb_port \
	-e PROXY_PORT=$proxy_port \
        -e STF_PROVIDER_HOST={{ STF_PROVIDER_HOST }} \
	-e STF_PROVIDER_MAX_PORT=$stf_max_port \
	-e STF_PROVIDER_APPIUM_PORT=$appium_port \
	-p $appium_port:4723 \
        -e RELAXED_SECURITY=true \
        -e BUCKET={{ S3_BUCKET }}  -e TENANT={{ S3_TENANT }}  -e AWS_ACCESS_KEY_ID={{ S3_ACCESS_KEY_ID }} -e AWS_SECRET_ACCESS_KEY={{ S3_SECRET }} -e AWS_DEFAULT_REGION={{ S3_REGION }} \
        public.ecr.aws/zebrunner/appium:{{ APPIUM_VERSION }}

    docker run -d --name device-${device_name}-${udid} --log-opt max-size=50m -m 1g --net=${net} \
	--link device-${device_name}-${udid}-appium:appium \
        -e STF_PROVIDER_ADB_HOST=appium \
	--health-start-period 60s \
	--restart always \
        -v {{ NGINX_HOME }}:{{ NGINX_HOME }} \
        -e NODE_OPTIONS=--max_old_space_size={{ MAX_OLD_SPACE_SIZE_VALUE }} \
        -e STF_PROVIDER_DEVICE_NAME="${device_name}" -e DEVICE_UDID="${udid}" \
        -e STF_PROVIDER_HOST={{ STF_PROVIDER_HOST }} \
        -e STF_PROVIDER_NAME="{{ STF_PROVIDER_NAME }}" \
        -e STF_PROVIDER_APPIUM_PORT=$appium_port \
        -e STF_PROVIDER_MIN_PORT=$stf_min_port -e STF_PROVIDER_MAX_PORT=$stf_max_port \
	-p $stf_min_port-$stf_max_port:$stf_min_port-$stf_max_port \
        -e STF_PROVIDER_PUBLIC_IP={{ STF_PUBLIC_HOST }} \
        -e STF_PROVIDER_CONNECT_SUB={{ STF_PROVIDER_CONNECT_SUB }} \
        -e STF_PROVIDER_CONNECT_PUSH={{ STF_PROVIDER_CONNECT_PUSH }} \
        -e RETHINKDB_PORT_28015_TCP={{ STF_RETHINKDB }} \
        $DOCKER_IMAGE_ID || echo 'already created'
}

function update_symlink () {
    local device=$1
    local device_path=`ls -l /dev/ | grep $device | sed 's/^.*> \(.*\)$/\1/g'`
    if [[ $device_path != /dev* ]]
    then
        local symlink=/dev/device-$device
        local temp_symlink=/dev/temp-$device
        device_path=/dev/$device_path
        setfacl -m u:$USER:rw $device_path
        ln -s $device_path $temp_symlink
        mv $temp_symlink $symlink
        rm $temp_symlink
    fi
}

if [[ $ACTION = "add" ]]
then
    for device in "${CONNECTED_DEVICES[@]}"
    do
        update_symlink $device
        present=0
        for container in "${CONTAINERS[@]}"
        do
            if [[ $device = $container ]]
            then
                present=1
            fi
        done
        if [[ $present = 0 ]]
        then
            create_containers $device
        fi
    done
elif [[ $ACTION = "remove" ]]
then
    #TODO: test if pause is needed 
    #sleep 5
    CONNECTED_DEVICES=( `ls /dev/ | grep device | cut -d '-' -f 2-` )
    for container in "${CONTAINERS[@]}"
    do
	echo verifying container: $container
        present=0
        for device in "${CONNECTED_DEVICES[@]}"
        do
	    echo verifying device: $device
            if [[ $device = $container ]]
            then
		echo $device still alive
                present=1
            fi
        done
        if [[ $present = 0 ]]
        then
	    echo delete containers: $container
            delete_containers $container
        fi
    done
elif [[ $ACTION = "recreate" ]]
then
    recreate_containers $2
fi

exit 0
